<?php

/**
 * @file
 * WordPress migration module installation
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function wordpress_migrate_schema() {
  $schema = array();
  $schema['wordpress_migrate'] = wordpress_migrate_schema_wordpress();
  $schema['wordpress_migrate_attachment'] = wordpress_migrate_schema_attachment();
  $schema['wordpress_migrate_linked_authors'] = wordpress_migrate_schema_linked_authors();
  return $schema;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function wordpress_migrate_schema_wordpress() {
  return array(
    'description' => 'Mapping of machine name to filename for WordPress migrations',
    'fields' => array(
      'blog_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Unique blog ID',
      ),
      'filename' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Filename of XML imported by this migration',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Blog title (used to seed machine name)',
      ),
      'blog_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Original blog URL',
      ),
      'link' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Link value from XML',
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User ID of the account initiating the import",
      ),
      'wxr_version' => array(
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '1.1',
        'description' => 'WXR version of the imported file',
      ),
    ),
    'primary key' => array('blog_id'),
    'unique keys' => array(
      'blog_url' => array('blog_url'),
    ),
  );
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function wordpress_migrate_schema_attachment() {
  return array(
    'description' => 'Map original attachment URL to Backdrop URI',
    'fields' => array(
      'blog_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'ID of parent blog',
      ),
      'original_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'URL of attachment on WordPress',
      ),
      'new_uri' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'URI of attachment on Backdrop',
      ),
      'new_fid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'File ID of the attachment',
      ),
      'parent_nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Backdrop ID of the node this is attached to',
      ),
    ),
    'primary key' => array('blog_id', 'original_url'),
  );
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function wordpress_migrate_schema_linked_authors() {
  return array(
    'description' => 'Track pre-existing user accounts',
    'fields' => array(
      'mail' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Email address of user account already in Backdrop',
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User ID of the account in Backdrop",
      ),
    ),
    'primary key' => array('mail'),
  );
}

/**
 * Implements hook_requirements().
 *
 * @param $phase
 *
 * @return array
 */
function wordpress_migrate_requirements($phase) {
  $requirements = array();
  $t = get_t();
  // Make sure the XMLReader extension is available.
  if (!extension_loaded('xmlreader')) {
    $requirements['wordpress_migrate_xmlreader']['severity'] = REQUIREMENT_ERROR;
    $requirements['wordpress_migrate_xmlreader']['title'] = $t('XMLReader extension');
    $requirements['wordpress_migrate_xmlreader']['description'] =
      $t('WordPress Migrate requires the PHP XMLReader extension.');
  }

  if (!function_exists('curl_init')) {
    $requirements['wordpress_migrate_curl'] = array(
      'title' => $t('cURL'),
      'value' => $t('Not found'),
      'severity' => REQUIREMENT_ERROR,
    );
    $requirements['wordpress_migrate_curl']['description'] = $t('Wordpress Migrate requires the <a href="@curl_url">php cURL extension</a>.',
      array('@curl_url' => 'http://php.net/manual/en/curl.setup.php'));
  }

  return $requirements;
}

/**
 * Implements hook_update_dependencies().
 */
function wordpress_migrate_update_dependencies() {
  // Make sure migrate_ui uses our drush variables before we delete them.
  $dependencies['wordpress_migrate'][7012] = array('migrate_ui' => 7202);

  // Migrate must set up the new group support before we can reference it.
  $dependencies['wordpress_migrate'][7013] = array('migrate' => 7203);
  return $dependencies;
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7001() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7002() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7003() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7004() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7005() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7006() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7007() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7008() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7009() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7010() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7011() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7012() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7013() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7014() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function wordpress_migrate_update_7015() { }

/**
 * Implements hook_update_last_removed().
 */
function wordpress_migrate_update_last_removed() {
  return 7015;
}

/**
 * Migrate wordpress_migrate variables to config.
 */
function wordpress_migrate_update_1000() {
  $config = config('wordpress_migrate.settings');
  $config->set('wordpress_migrate_notification', update_variable_get('wordpress_migrate_notification', '0'));
  $config->set('wordpress_migrate_post_type', update_variable_get('wordpress_migrate_post_type', 'blog'));
  $config->set('wordpress_migrate_create_new_users', update_variable_get('wordpress_migrate_create_new_users', '1'));
  $config->set('wordpress_migrate_default_author_uid', update_variable_get('wordpress_migrate_default_author_uid', '1'));
  $config->set('wordpress_migrate_attachment_field', update_variable_get('wordpress_migrate_attachment_field', ''));
  $config->set('wordpress_migrate_podcast_field', update_variable_get('wordpress_migrate_podcast_field', ''));
  $config->set('wordpress_migrate_text_format', update_variable_get('wordpress_migrate_text_format', 'filtered_html'));
  $config->set('wordpress_migrate_text_format_comment', update_variable_get('wordpress_migrate_text_format_comment', 'filtered_html'));
  $config->set('wordpress_migrate_page_type', update_variable_get('wordpress_migrate_page_type', 'page'));
  $config->set('wordpress_migrate_tag_vocabulary', update_variable_get('wordpress_migrate_tag_vocabulary', 'tags'));
  $config->set('wordpress_migrate_category_vocabulary', update_variable_get('wordpress_migrate_category_vocabulary', ''));
  $config->set('wordpress_migrate_path_action', update_variable_get('wordpress_migrate_path_action', '1'));
  $config->set('wordpress_migrate_generate_redirects', update_variable_get('wordpress_migrate_generate_redirects', '0'));
  $config->set('wordpress_migrate_private_path', update_variable_get('wordpress_migrate_private_path', ''));
  $config->set('wordpress_migrate_notification_subject', update_variable_get('wordpress_migrate_notification_subject', ''));
  $config->set('wordpress_migrate_notification_body', update_variable_get('wordpress_migrate_notification_body', ''));
  $config->set('wordpress_migrate_notification_failure_body', update_variable_get('wordpress_migrate_notification_failure_body', ''));
  $config->set('wordpress_migrate_blog_class', update_variable_get('wordpress_migrate_blog_class', 'WordPressBlog'));
  $config->save();

  update_variable_del('wordpress_migrate_notification');
  update_variable_del('wordpress_migrate_post_type');
  update_variable_del('wordpress_migrate_create_new_users');
  update_variable_del('wordpress_migrate_default_author_uid');
  update_variable_del('wordpress_migrate_attachment_field');
  update_variable_del('wordpress_migrate_podcast_field');
  update_variable_del('wordpress_migrate_text_format');
  update_variable_del('wordpress_migrate_text_format_comment');
  update_variable_del('wordpress_migrate_page_type');
  update_variable_del('wordpress_migrate_tag_vocabulary');
  update_variable_del('wordpress_migrate_category_vocabulary');
  update_variable_del('wordpress_migrate_path_action');
  update_variable_del('wordpress_migrate_generate_redirects');
  update_variable_del('wordpress_migrate_private_path');
  update_variable_del('wordpress_migrate_notification_subject');
  update_variable_del('wordpress_migrate_notification_body');
  update_variable_del('wordpress_migrate_notification_failure_body');
  update_variable_del('wordpress_migrate_blog_class');
}

/**
 * Implements hook_install().
 */
function wordpress_migrate_install() {
  // Dynamically generated variable data was detected.
}
